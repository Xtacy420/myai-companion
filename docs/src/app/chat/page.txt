File: src/app/chat/page.tsx
Role: Main Chat Interface

Description:
This is the heart of the MyAi application, providing the primary user interface for conversing with the AI assistant and custom characters. It features a multi-panel layout with a sidebar for navigation/character selection and a main area for displaying the conversation.

Key Responsibilities:
- Renders the chat message history for both the main AI and custom characters.
- Handles user input via a textarea, including sending messages on "Enter".
- Integrates voice input using the `useVoiceInput` hook.
- Manages chat state, including loading status, through the `useLocalChat` hook.
- Implements a chat length management system to prevent performance degradation in long conversations, prompting the user to start a new chat with a summary.
- Allows users to switch between the main AI and custom characters created with `CharacterCreation`.
- Dynamically generates AI responses for custom characters based on their defined personalities, using a `/api/chat` endpoint.

Imports & Exports:
- IMPORTS:
  - React hooks: `useState`, `useEffect`.
  - UI Components: `Button`, `Input`, `Card`, `ScrollArea`, `Avatar`, `Dialog`, etc., from shadcn/ui.
  - Hooks: `useLocalUser`, `useLocalChat`, `useVoiceInput`.
  - Local Database: `localDB` for character and character conversation management.
  - Components: `ProtectedRoute`, `CharacterCreation`.
- EXPORTS:
  - `ChatPage`: The main component, wrapped in `ProtectedRoute`.

Data & State Management:
- Manages local state for the current message, sidebar visibility, search queries, and the active chat type (`regular` vs. `character`).
- `useLocalChat` hook encapsulates the logic for sending/receiving messages, managing conversation history, and handling the chat length warning system.
- Fetches character data and character-specific conversations from `localDB` when a character is selected.

Critical System Connections:
- UI System: Critical. This is the primary user interaction interface.
- Auth System: Directly connected via `ProtectedRoute` and `useLocalUser`.
- Memory System: Critical. All conversations (both regular and character) are fetched from and saved to the local database, forming a core part of the user's memory bank.
- Chat System: This IS the chat system. It orchestrates all front-end chat functionality.
- Sync System: No direct connection.

Actionable Items:
- **API Endpoint:** The `generateCharacterResponse` function relies on a `/api/chat` endpoint. This endpoint's implementation is not visible here but is critical for the character chat feature. Its logic needs to be documented.
- **File Upload:** The UI includes a "Files" section with an upload button, but the functionality is currently a placeholder. This needs to be implemented.
- **Chat Length Management:** The summarization and new chat creation feature is a sophisticated solution to a common chatbot problem. Its implementation in the `useLocalChat` hook should be reviewed for robustness.
